# -*- coding: utf-8 -*-
"""Augmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mefGPoY34pQR5UgJ_KIXS6JAanFtbdXA
"""

import random
from PIL import Image, ImageEnhance, ImageFilter
import numpy as np

def change_brightness(image, min_factor=0.5, max_factor=1.5):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Brightness(image)
    return enhancer.enhance(factor)

def change_contrast(image, min_factor=0.5, max_factor=1.5):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Contrast(image)
    return enhancer.enhance(factor)

def change_saturation(image, min_factor=0.5, max_factor=1.5):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Color(image)
    return enhancer.enhance(factor)

def change_hue(image, max_delta=0.2):
    hsv_image = np.array(image.convert('HSV'))
    hsv_image[..., 0] = (hsv_image[..., 0].astype(int) + random.randint(-int(max_delta*255), int(max_delta*255))) % 255
    return Image.fromarray(hsv_image, 'HSV').convert('RGB')

def apply_blur(image, max_radius=5):
    radius = random.uniform(0, max_radius)
    return image.filter(ImageFilter.GaussianBlur(radius))

def add_noise(image, max_noise_level=50):
    noise = np.random.randint(-max_noise_level, max_noise_level, (image.height, image.width, 3), dtype='int16')
    noisy_image = np.clip(np.array(image, dtype='int16') + noise, 0, 255).astype('uint8')
    return Image.fromarray(noisy_image)

def change_exposure(image, min_factor=0.5, max_factor=1.5):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Brightness(image)
    return enhancer.enhance(factor)

def augment_image(image):
    image = change_brightness(image)
    image = change_contrast(image)
    image = change_saturation(image)
    image = change_hue(image)
    image = apply_blur(image)
    image = add_noise(image)
    image = change_exposure(image)
    return image

input_image_path = '/content/download (1).jpeg'  # Change this to the path of your image
original_image = Image.open(input_image_path)

augmented_images = [augment_image(original_image.copy()) for _ in range(3)]

for i, img in enumerate(augmented_images):
    img.save(f'augmented_image_{i+1}.jpg')

print("Augmented images created and saved.")

import random
from PIL import Image, ImageEnhance, ImageFilter
import numpy as np
import ipywidgets as widgets
from IPython.display import display

# Function to apply random brightness change
def change_brightness(image, min_factor, max_factor):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Brightness(image)
    return enhancer.enhance(factor)

# Function to apply random contrast change
def change_contrast(image, min_factor, max_factor):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Contrast(image)
    return enhancer.enhance(factor)

# Function to apply random saturation change
def change_saturation(image, min_factor, max_factor):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Color(image)
    return enhancer.enhance(factor)

# Function to apply random hue change
def change_hue(image, max_delta):
    hsv_image = np.array(image.convert('HSV'))
    hsv_image[..., 0] = (hsv_image[..., 0].astype(int) + random.randint(-int(max_delta*255), int(max_delta*255))) % 255
    return Image.fromarray(hsv_image, 'HSV').convert('RGB')

# Function to apply random blur
def apply_blur(image, max_radius):
    radius = random.uniform(0, max_radius)
    return image.filter(ImageFilter.GaussianBlur(radius))

# Function to apply random noise
def add_noise(image, max_noise_level):
    noise = np.random.randint(-max_noise_level, max_noise_level, (image.height, image.width, 3), dtype='int16')
    noisy_image = np.clip(np.array(image, dtype='int16') + noise, 0, 255).astype('uint8')
    return Image.fromarray(noisy_image)

# Function to apply random exposure change (similar to brightness)
def change_exposure(image, min_factor, max_factor):
    factor = random.uniform(min_factor, max_factor)
    enhancer = ImageEnhance.Brightness(image)
    return enhancer.enhance(factor)

# Function to apply all transformations randomly
def augment_image(image, brightness_range, contrast_range, saturation_range, hue_delta, blur_radius, noise_level, exposure_range):
    image = change_brightness(image, brightness_range[0], brightness_range[1])
    image = change_contrast(image, contrast_range[0], contrast_range[1])
    image = change_saturation(image, saturation_range[0], saturation_range[1])
    image = change_hue(image, hue_delta)
    image = apply_blur(image, blur_radius)
    image = add_noise(image, noise_level)
    image = change_exposure(image, exposure_range[0], exposure_range[1])
    return image

# Load the original image
input_image_path = '/content/download (1).jpeg'  # Change this to the path of your image
original_image = Image.open(input_image_path)

# Sliders for user inputs
brightness_slider = widgets.FloatRangeSlider(value=[0.5, 1.5], min=0.1, max=2.0, step=0.1, description='Brightness:')
contrast_slider = widgets.FloatRangeSlider(value=[0.5, 1.5], min=0.1, max=2.0, step=0.1, description='Contrast:')
saturation_slider = widgets.FloatRangeSlider(value=[0.5, 1.5], min=0.1, max=2.0, step=0.1, description='Saturation:')
hue_slider = widgets.FloatSlider(value=0.2, min=0.0, max=1.0, step=0.05, description='Hue Delta:')
blur_slider = widgets.FloatSlider(value=5.0, min=0.0, max=10.0, step=0.5, description='Blur Radius:')
noise_slider = widgets.IntSlider(value=50, min=0, max=100, step=5, description='Noise Level:')
exposure_slider = widgets.FloatRangeSlider(value=[0.5, 1.5], min=0.1, max=2.0, step=0.1, description='Exposure:')

# Function to update the augmented images
def update_augment_images(*args):
    augmented_images = [augment_image(original_image.copy(),
                                      brightness_slider.value,
                                      contrast_slider.value,
                                      saturation_slider.value,
                                      hue_slider.value,
                                      blur_slider.value,
                                      noise_slider.value,
                                      exposure_slider.value) for _ in range(3)]
    for i, img in enumerate(augmented_images):
        img.show(title=f'Augmented Image {i+1}')

    for i, img in enumerate(augmented_images):
      img.save(f'augmented_image_{i+1}.jpg')

    print("Augmented images created and saved.")

# Display sliders and bind update function
display(brightness_slider, contrast_slider, saturation_slider, hue_slider, blur_slider, noise_slider, exposure_slider)
brightness_slider.observe(update_augment_images, names='value')
contrast_slider.observe(update_augment_images, names='value')
saturation_slider.observe(update_augment_images, names='value')
hue_slider.observe(update_augment_images, names='value')
blur_slider.observe(update_augment_images, names='value')
noise_slider.observe(update_augment_images, names='value')
exposure_slider.observe(update_augment_images, names='value')

# # Initial call to update function to display images
# update_augment_images()

update_augment_images()
print("done")